// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid()) @db.Uuid
  email    String   @unique
  password String
  name     String
  role     UserRole @default(CLIENT)

  cart   Cart?
  orders Order[]
}

enum UserRole {
  CLIENT
  ADMIN
}

model Product {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  brand       String
  description String
  price       Decimal
  stock       Int

  orderItems OrderItem[]
}

model Cart {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products OrderItem[]
  user     User        @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String  @id @default(uuid()) @db.Uuid
  productId String  @db.Uuid
  orderId   String? @db.Uuid
  cartId    String? @db.Uuid
  quantity  Int

  order   Order?  @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  cart    Cart?   @relation(fields: [cartId], references: [id])
}

model Order {
  id         String      @id @default(uuid()) @db.Uuid
  userId     String      @db.Uuid
  total      Decimal
  status     OrderStatus
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}
